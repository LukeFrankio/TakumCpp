cmake_minimum_required(VERSION 3.20)

# =============================================================================
# Project Configuration
# =============================================================================
project(TakumCpp 
    VERSION 2.0.0
    DESCRIPTION "Modern C++ implementation of logarithmic tapered floating-point arithmetic"
    LANGUAGES CXX
)

# =============================================================================
# Modern C++ Standard Detection
# =============================================================================

# Simplified feature-based C++ standard detection
function(detect_cxx_standard)
    # Try C++26 first (preferred)
    set(CMAKE_CXX_STANDARD 26)
    set(CMAKE_CXX_STANDARD_REQUIRED OFF)
    
    try_compile(CXX26_WORKS
        ${CMAKE_BINARY_DIR}/cxx_test
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_cxx26.cpp
        CXX_STANDARD 26
        CXX_STANDARD_REQUIRED ON
    )
    
    if(CXX26_WORKS)
        set(CMAKE_CXX_STANDARD 26 PARENT_SCOPE)
        message(STATUS "Using C++26 standard")
        return()
    endif()
    
    # Fallback to C++23
    try_compile(CXX23_WORKS
        ${CMAKE_BINARY_DIR}/cxx_test
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_cxx23.cpp
        CXX_STANDARD 23
        CXX_STANDARD_REQUIRED ON
    )
    
    if(CXX23_WORKS)
        set(CMAKE_CXX_STANDARD 23 PARENT_SCOPE)
        message(STATUS "Using C++23 standard")
        return()
    endif()
    
    # Minimum fallback to C++20
    set(CMAKE_CXX_STANDARD 20 PARENT_SCOPE)
    message(STATUS "Falling back to C++20 standard")
endfunction()

# Create test files for standard detection
file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_cxx26.cpp 
    "#include <expected>\nint main() { std::expected<int, int> e{42}; return 0; }")
file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_cxx23.cpp 
    "#include <optional>\nint main() { std::optional<int> o{42}; return 0; }")

detect_cxx_standard()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# =============================================================================
# Build Configuration Options
# =============================================================================

option(TAKUM_BUILD_TESTS "Build TakumCpp tests" ON)
option(TAKUM_BUILD_EXAMPLES "Build TakumCpp examples" ON)
option(TAKUM_BUILD_BENCHMARKS "Build TakumCpp benchmarks" OFF)
option(TAKUM_BUILD_DOCS "Build TakumCpp documentation" OFF)
option(TAKUM_ENABLE_WARNINGS_AS_ERRORS "Treat warnings as errors" OFF)

# =============================================================================
# Compiler-Specific Configurations  
# =============================================================================

# Modern compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
    add_compile_options(
        -Wall -Wextra -Wpedantic
        -Wconversion -Wsign-conversion
        -Wunused -Wundef
        -Wcast-qual -Wcast-align
        -Wmissing-declarations
    )
    
    if(TAKUM_ENABLE_WARNINGS_AS_ERRORS)
        add_compile_options(-Werror)
    endif()
    
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(
        /W4 /permissive-
        /w14242 /w14254 /w14263 /w14265 /w14287
        /we4289 /w14296 /w14311 /w14545 /w14546
        /w14547 /w14549 /w14555 /w14619 /w14640
        /w14826 /w14905 /w14906 /w14928
    )
    
    if(TAKUM_ENABLE_WARNINGS_AS_ERRORS)
        add_compile_options(/WX)
    endif()
endif()

# =============================================================================
# Code Generation Integration
# =============================================================================

# Find Python for coefficient generation
find_package(Python3 COMPONENTS Interpreter REQUIRED)

# Custom target for generating polynomial coefficients
add_custom_command(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/include/takum/internal/generated/phi_coeffs.h
    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/scripts/gen_poly_coeffs.py
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/scripts/gen_poly_coeffs.py
    COMMENT "Generating polynomial coefficients"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(generate_coefficients
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/include/takum/internal/generated/phi_coeffs.h
)

# =============================================================================
# Main Library Target
# =============================================================================

# Header-only library target with modern CMake practices
add_library(TakumCpp INTERFACE)
add_library(TakumCpp::TakumCpp ALIAS TakumCpp)

# Add dependency on coefficient generation
add_dependencies(TakumCpp generate_coefficients)

target_include_directories(TakumCpp INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

target_compile_features(TakumCpp INTERFACE cxx_std_20) # Minimum standard

# Conditional features based on detected standard
if(CMAKE_CXX_STANDARD GREATER_EQUAL 23)
    target_compile_definitions(TakumCpp INTERFACE TAKUM_HAS_CXX23=1)
endif()

if(CMAKE_CXX_STANDARD GREATER_EQUAL 26)
    target_compile_definitions(TakumCpp INTERFACE TAKUM_HAS_CXX26=1 TAKUM_HAS_STD_EXPECTED=1)
endif()

# =============================================================================
# Testing Configuration
# =============================================================================

if(TAKUM_BUILD_TESTS)
    enable_testing()
    
    # Modern GoogleTest integration
    include(FetchContent)
    FetchContent_Declare(
        googletest
        URL https://github.com/google/googletest/archive/03597a01ee50e33f9fade55a85b11106a5b2ac58.zip
        URL_HASH SHA256=ffa17fbc5953900994e2deec164bb8949879ea09b411e07f215bfbb1f87f4632
    )
    
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
    FetchContent_MakeAvailable(googletest)
    
    # Test discovery with modern pattern
    file(GLOB_RECURSE TEST_SOURCES "test/*.test.cpp")
    
    add_executable(takum_tests ${TEST_SOURCES})
    target_link_libraries(takum_tests 
        PRIVATE 
            TakumCpp::TakumCpp
            gtest_main
            gmock_main
    )
    
    # Enable better test discovery
    include(GoogleTest)
    gtest_discover_tests(takum_tests
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    )
    
    # Add test helper target
    add_library(test_helpers INTERFACE)
    target_include_directories(test_helpers INTERFACE test/)
    target_link_libraries(takum_tests PRIVATE test_helpers)
endif()

# =============================================================================
# Examples Configuration
# =============================================================================

if(TAKUM_BUILD_EXAMPLES)
    # Modern example targets
    file(GLOB EXAMPLE_SOURCES "examples/*.cpp")
    
    foreach(example_source ${EXAMPLE_SOURCES})
        get_filename_component(example_name ${example_source} NAME_WE)
        add_executable(${example_name} ${example_source})
        target_link_libraries(${example_name} PRIVATE TakumCpp::TakumCpp)
        
        # Set output directory for examples
        set_target_properties(${example_name} PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/examples
        )
    endforeach()
endif()

# =============================================================================
# Benchmark Configuration
# =============================================================================

if(TAKUM_BUILD_BENCHMARKS)
    find_package(benchmark REQUIRED)
    
    file(GLOB BENCHMARK_SOURCES "benchmarks/*.cpp")
    
    foreach(benchmark_source ${BENCHMARK_SOURCES})
        get_filename_component(benchmark_name ${benchmark_source} NAME_WE)
        add_executable(${benchmark_name} ${benchmark_source})
        target_link_libraries(${benchmark_name} 
            PRIVATE 
                TakumCpp::TakumCpp
                benchmark::benchmark
        )
    endforeach()
endif()

# =============================================================================
# Documentation Configuration
# =============================================================================

if(TAKUM_BUILD_DOCS)
    find_package(Doxygen REQUIRED)
    
    set(DOXYGEN_GENERATE_HTML YES)
    set(DOXYGEN_GENERATE_MAN NO)
    set(DOXYGEN_EXTRACT_ALL YES)
    set(DOXYGEN_BUILTIN_STL_SUPPORT YES)
    
    doxygen_add_docs(docs
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        ${CMAKE_CURRENT_SOURCE_DIR}/Docs
        COMMENT "Generating API documentation with Doxygen"
    )
endif()

# =============================================================================
# Installation Configuration
# =============================================================================

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# Install headers
install(DIRECTORY include/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
)

# Install targets
install(TARGETS TakumCpp
    EXPORT TakumCppTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Export targets
install(EXPORT TakumCppTargets
    FILE TakumCppTargets.cmake
    NAMESPACE TakumCpp::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/TakumCpp
)

# Create package config
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/TakumCppConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/TakumCppConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/TakumCpp
)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/TakumCppConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/TakumCppConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/TakumCppConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/TakumCpp
)

# =============================================================================
# Status Summary
# =============================================================================

message(STATUS "")
message(STATUS "TakumCpp Configuration Summary:")
message(STATUS "  Version:              ${PROJECT_VERSION}")
message(STATUS "  C++ Standard:         C++${CMAKE_CXX_STANDARD}")
message(STATUS "  Compiler:             ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "  Build Type:           ${CMAKE_BUILD_TYPE}")
message(STATUS "  Build Tests:          ${TAKUM_BUILD_TESTS}")
message(STATUS "  Build Examples:       ${TAKUM_BUILD_EXAMPLES}")
message(STATUS "  Build Benchmarks:     ${TAKUM_BUILD_BENCHMARKS}")
message(STATUS "  Build Documentation:  ${TAKUM_BUILD_DOCS}")
message(STATUS "  Warnings as Errors:   ${TAKUM_ENABLE_WARNINGS_AS_ERRORS}")
message(STATUS "")
  # Unix/Linux-specific settings
endif()

include(FetchContent)

# ---------------------------------------------------------------------------
# Generated Φ polynomial coefficients
# ---------------------------------------------------------------------------
set(PHI_COEFF_HEADER ${CMAKE_SOURCE_DIR}/include/takum/internal/generated/phi_coeffs.h)
set(PHI_GEN_SCRIPT   ${CMAKE_SOURCE_DIR}/scripts/gen_poly_coeffs.py)
find_package(Python3 COMPONENTS Interpreter QUIET)
if(Python3_Interpreter_FOUND AND EXISTS ${PHI_GEN_SCRIPT})
  add_custom_command(
    OUTPUT ${PHI_COEFF_HEADER}
    COMMAND ${Python3_EXECUTABLE} ${PHI_GEN_SCRIPT} ${PHI_COEFF_HEADER}
    DEPENDS ${PHI_GEN_SCRIPT}
    COMMENT "Generating Φ polynomial coefficient header"
    VERBATIM
  )
  add_custom_target(phi_coeffs_gen DEPENDS ${PHI_COEFF_HEADER})
else()
  add_custom_target(phi_coeffs_gen
    COMMAND ${CMAKE_COMMAND} -E echo "Python3 or script missing; using existing phi_coeffs.h if present"
  )
endif()

FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG        v1.15.2
)

FetchContent_MakeAvailable(googletest)

# Provide an INTERFACE target for header-only library usage
add_library(TakumCpp INTERFACE)
target_include_directories(TakumCpp INTERFACE ${CMAKE_SOURCE_DIR}/include)

# Use the detected standard for target features - be conservative about C++26
if(CMAKE_CXX_STANDARD EQUAL 26)
  # Only use cxx_std_26 if we're sure it's supported
  # For now, fall back to setting standard directly for C++26
  set_target_properties(TakumCpp PROPERTIES 
    CXX_STANDARD 26
    CXX_STANDARD_REQUIRED ON)
  message(STATUS "Using C++26 with direct standard setting (avoiding cxx_std_26 feature)")
elseif(CMAKE_CXX_STANDARD EQUAL 23)
  target_compile_features(TakumCpp INTERFACE cxx_std_23)
elseif(CMAKE_CXX_STANDARD EQUAL 20)
  target_compile_features(TakumCpp INTERFACE cxx_std_20)
endif()

# Enable CTest
include(CTest)
enable_testing()

# ---------------------------------------------------------------------------
# Options
# ---------------------------------------------------------------------------
option(TAKUM_ENABLE_AUTOTEST_LOGS "Run tests automatically after build of 'tests' target and write log + JUnit files" ON)

# Tests (depend on generated header)
add_subdirectory(test)
add_dependencies(tests phi_coeffs_gen)

# Examples
file(GLOB EXAMPLE_SOURCES "${CMAKE_SOURCE_DIR}/examples/*.cpp")
foreach(EXAMPLE_SOURCE ${EXAMPLE_SOURCES})
    get_filename_component(EXAMPLE_NAME ${EXAMPLE_SOURCE} NAME_WE)
    add_executable(${EXAMPLE_NAME} ${EXAMPLE_SOURCE})
    target_link_libraries(${EXAMPLE_NAME} PRIVATE TakumCpp)
  add_dependencies(${EXAMPLE_NAME} phi_coeffs_gen)
    if(BUILD_TESTING)
        add_test(NAME ${EXAMPLE_NAME} COMMAND ${EXAMPLE_NAME})
    endif()
endforeach()

# Doxygen documentation: try to find a doxygen executable either in PATH
# or at a common installation location on Windows. If not found we still
# expose a `docs` target that will show an informative error when built.
find_program(DOXYGEN_EXECUTABLE NAMES doxygen HINTS "C:/Program Files/doxygen/bin" "C:/Program Files (x86)/doxygen/bin")
if(DOXYGEN_EXECUTABLE)
  add_custom_target(docs
    COMMAND "${DOXYGEN_EXECUTABLE}" "${CMAKE_SOURCE_DIR}/Doxyfile"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
    COMMENT "Generating API documentation with Doxygen"
    VERBATIM
  )
else()
  add_custom_target(docs
    COMMAND ${CMAKE_COMMAND} -E echo "Doxygen executable not found. Install Doxygen or add it to PATH to build docs."
    COMMENT "Doxygen not found: docs target is a no-op"
  )
  message(WARNING "Doxygen not found; 'docs' target will be a no-op. Install doxygen to enable documentation generation.")
endif()